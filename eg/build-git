#!/usr/bin/env perl
use strict;
use warnings;
use Pod::Usage;
use File::Spec;
use Cwd qw( cwd );
use Getopt::Long;
use Git::Repository;
use Git::Repository::Util qw( cmp_git );

# command-line options
my %option = (
    source      => '/opt/src/git',
    destination => '/opt/git',
    limit       => 0,
);
GetOptions(
    \%option,  'source=s', 'destination=s', 'list',
    'since=s', 'until=s',  'limit=i',
    'fetch',
    'help',    'manual',
) or pod2usage( -verbose => 0 );

# simple help/manual
pod2usage( -verbose => 1 ) if $option{help};
pod2usage( -verbose => 2 ) if $option{manual};

# git.git
my $r = Git::Repository->new( work_tree => $option{source} );

# fetch recent commits
$r->run( 'fetch' ) if $option{fetch};

# map version numbers to tags
my %tag_for = map { ( my $v = substr $_, 1 ) =~ y/-/./; ( $v => $_ ) }
  grep /^v[^0]/ && !/^v1\.0rc/,    # skip anything before 1.0
  $r->run( tag => '-l', 'v*' );

# select the versions to build and install
my @versions = sort cmp_git @ARGV ? @ARGV : grep !/^1\.0\.0[ab]$/, keys %tag_for;

@versions = grep cmp_git( $option{since}, $_ ) <= 0, @versions if $option{since};
@versions = grep cmp_git( $_, $option{until} ) <= 0, @versions if $option{until};

@versions = $option{limit} > 0
  ? @versions[ -$option{limit} .. -1 ]       # <limit> most recent
  : @versions[ 0 .. -$option{limit} - 1 ]    # <limit> most ancient
  if $option{limit};

# just list the selected versions
print map "$_\n", @versions and exit if $option{list};

# build install select versions
chdir $option{source} or die "Can't chdir to $option{source}: $!";
for my $version (@versions) {
    my $prefix = File::Spec->catdir( $option{destination}, $version );

    # skip if that git already exists (and runs)
    my $git = File::Spec->catfile( $prefix, 'bin', 'git' );
    if ( eval { Git::Repository->version_eq( $version, { git => $git } ) } ) {
        print "*** GIT $version ALREADY INSTALLED ***\n";
        next;
    }
    else {
        $r->run( checkout => $tag_for{$version} );
        $r->run( clean => '-xdf' ); # optional

        # Fix various issues in the Git sources

        # fix GIT_VERSION in the Makefile
        if ( cmp_git( $version, '1.0.9' ) == 0 ) {
            local ( $^I, @ARGV ) = ( '', 'Makefile' );
            s/^GIT_VERSION = .*/GIT_VERSION = $version/, print while <>;
        }

        # add missing #include <sys/resource.h>
        elsif (   cmp_git( $version, '1.7.5.rc0' ) <= 0
            && cmp_git( '1.7.4.2', $version ) <= 0 )
        {
            $r->run( 'cherry-pick', '-n',
                'ebae9ff95de2d0b36b061c7db833df4f7e01a41d' );

            # force the expected version number
            my $version_file = File::Spec->catfile( $r->work_tree, 'version' );
            open my $fh, '>', $version_file
              or die "Can't open $version_file: $!";
            print $fh "$version\n";
        }

        # clean up environment (possibly set by local::lib)
        local $ENV{PERL_MB_OPT};
        local $ENV{PERL_MM_OPT};

        # compile and install the actual git

        print "make -j3 prefix=$prefix install\n";
        `make -j3 prefix=$prefix install`;
    }

}

__END__

=pod

=head1 NAME

build-git - Build and install any Git

=head1 SYNOPSIS

    # clone git.git

    # build and install Git 1.7.2
    $ build-git 1.7.2

    # build and install all versions between 1.6.5 and 2.1.0
    $ build-git --since 1.6.5 --until 2.1.0

    # build and install all versions of Git (since 1.0.0)
    $ build-git

    # build and install the 5 most recent versions of the selection
    $ build-git --limit 5 ...

    # build and install the 5 most ancient versions of the selection
    $ build-git --limit -5 ...

    # fetch the latest commit and install the latest git
    $ build-git --fetch --limit 1

=head1 OPTIONS AND ARGUMENTS

=head2 Options

 --source <directory>             The location of the git.git clone checkout

 --destination <directory>        The location of the Git collection

 --fetch                          Start by doing a `git fetch`

 --since <version>                Select versions greater or equal to <version>

 --until <version>                Select versions less or equal to <version>

 --limit <count>                  Limit the number of versions in the selection
                                  (if <count> is positive, keep the most recent
                                  version, if <count> is negative, keep the oldest)

=head2 Arguments

If no argument is given, all versions are selected.

=head1 DESCRIPTION

B<build-git> is a small utility to build and install any version of Git.

It automatically applies some necessary patches that are need to compile
Git on recent systems.

It is used to test the L<Git::Repository> module against all versions
of Git.

=head1 AUTHOR

Philippe Bruhat (BooK) <book@cpan.org>

=head1 COPYRIGHT

Copyright 2016 Philippe Bruhat (BooK), all rights reserved.

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut
